#include "stddef.gdh"

table(glyph)

	//	Classes

	cls_matraToBase = ( g_aamatra g_ematra g_eematra g_aimatra
		g_omatra g_oomatra g_aumatra );
	cls_matras = ( g_imatra g_iimatra g_umatra g_uumatra
		g_rvocalicmatra g_rrvocalicmatra cls_matraToBase );
	cls_takesLargeEmatra = ( g_nga g_nya g_rra );
	cls_takesUbasedMatra = ( g_pa g_pa_base g_pha g_pha_base g_va g_va_base);
	cls_UbasedMatra = ( g_umatra g_uumatra
		g_omatra g_oomatra );
	cls_LargeUbasedMatra = ( g_umatra_large g_uumatra_large
		g_omatra_large g_oomatra_large );
	cls_cons = ( g_ka g_kha g_ga g_gha g_nga g_ca g_cha g_ja g_jha g_nya g_tta
		g_ttha g_dda g_ddha g_nna g_ta g_tha g_da g_dha g_na g_pa g_pha g_ba
		g_bha g_ma g_ya g_ra g_rra g_la g_lla g_va g_sha g_ssa g_sa g_ha );
	cls_vowel = ( g_avowel g_aavowel g_ivowel g_iivowel g_uvowel g_uuvowel
		g_rvocalicvowel g_lvocalicvowel g_evowel g_eevowel g_aivowel g_ovowel
		g_oovowel g_auvowel );

endtable; // glyph

table(substitution)

pass(1)

	// akhn
	g_ka g_virama g_ssa > _ g_ka g_ssa_sub:(1 2);
	g_ja g_virama g_nya > _ g_ja g_nya_sub:(1 2);

endpass;

pass(2)

	// rphf

	// advance past consonants in cluster
	g_shortrr _ > _ @1:(1 2) / _ g_virama cls_cons ^ _;

	// advance past matras
	g_shortrr _ > _ @1:(1 2) / _ cls_matras ^ _;

	// advance past sub forms
	g_shortrr _ > _ @1:(1 2) / _ csub ^ _;

	// block ra->reph for virama ra
	g_ra g_virama > @2 @3 / g_virama _ _ cls_cons;

	// initial ra->reph
	g_ra g_virama _ > _ _ g_shortrr:(1 2 3) / _ _ cls_cons ^ _;

endpass;

pass(3)

	// blwf
	g_virama cno_sub > _ csub:(1 2) / cno_sub _ _;
	g_virama cno_sub > _ csub:(1 2) / csub _ _;

endpass;

pass(4)

	// #define opt(x)      [x]?
	// #define opt2(x)     [opt(x) x]?
	// #define opt3(x)     [opt2(x) x]?

	// move matras over sub forms

	// one sub form
	cls_cons csub cls_matras > @1 @3 @2;
	cls_cons csub cls_matras cls_matras > @1 @3 @4 @2;
	// cls_cons csub cls_matras cls_matras cls_matras > @1 @3 @4 @5 @2;

	// two sub forms
	cls_cons csub csub cls_matras > @1 @4 @2 @3;
	cls_cons csub csub cls_matras cls_matras > @1 @4 @5 @2 @3;
	// cls_cons csub csub cls_matras cls_matras cls_matras > @1 @4 @5 @6 @2 @3;

endpass;

pass(5)

	// pres2? abvs

	// vowel signs AA, E, EE, AI, O, OO, AU
	cno_base > cbase / _ cls_matraToBase;

	// different E matra
	g_ematra > g_ematra_large / cls_takesLargeEmatra _;

	// vowel signs I, II
	cno_imathra g_imatra  > cimathra:2 _;
	cno_imathra g_iimatra > cimathra g_lengthmark;

endpass;

pass(6)

	// blws
	g_ta_sub g_ya_sub > _ g_ta_ya_sub:(1 2);
	g_ta_sub g_va_sub > _ g_ta_va_sub:(1 2);
	// TODO:
	// Should
	// ka_rvocalicmatra.sub, ta_rvocalicmatra.sub,
	// ta_ailengthmark.sub, ra_ailengthmark.sub
	// be here as well?

endpass;

pass(7)

	// psts
	cls_UbasedMatra > cls_LargeUbasedMatra / cls_takesUbasedMatra _;

	// handle fully decomposed cases
	// here the uumatra is part of an omatra or oomatra in the input
	g_uumatra > g_uumatra_large / cls_takesUbasedMatra g_ematra _;

endpass;

pass(8)

	// haln
	cno_base > cbase / _ g_virama;

endpass;

endtable; // substitution

// POSITIONING

/* Most positioning done in autogenerated .gdl but
     specific cases can be added below */

// table(positioning)


// endtable; // positioning
